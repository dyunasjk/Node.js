9. Express로 SNS 만들기
    - Nodebird
      aync, await에 익숙함을 전제
      Promise ==> async, await
      

    -1. 로그인 기능
    -2. 이미지 업로드 기능
    -3. 게시글 작성
    -4. 해시태그 검색
    -5. 팔로잉 기능

    * 작업 환경 구축
      - 1) express-generator 이용
      - 2) 직접 구축해보기

    * 직접 구축해보기
      - 1) mkdir nodebird
      - 2) package.json 생성
           npm init
      - 3) 패키지 설치
           npm i sequelize mysql2 sequelize-cli

      - 4) DB 관련 설정 --> config, models, migrations, seeders 폴더 생성
           npx sequelize init

      - 5) 각종 폴더 만들기(398페이지 참고)
           mkdir views routes public passport

      - 6) front controller 역할 하는 app.js파일 생성
      - 7) .env(환경설정 파일) 생성
      - 8) express와 미들웨어 설치
           npm i express cookie-parser express-session morgan multer nunjucks
           npm i dotenv
           npm i -D nodemon
      - 9) 소스 코딩

        * 소스 코딩
        1) app.js (399페이지)
        2) .env (400페이지)
        3) routes/pages.js (400페이지)
        4) views 폴더에 html 소스 작성(401~409page)
           layout.html
           profile.html
        5) 실행
           npm start http://localhost:8001

9.2  DB세팅
     * MySQL과 sequelize 세팅
     - MariaDB

     * Stack Overflow에서 참고
     * 테이블
     - users, 사용자 테이블, 로그인 관련
     - posts. 게시글 테이블, 게시글 정보
     - hashtags, 해시태그 테이블
     - followings, 팔로잉 모델, 팔로잉 관련 중간 테이블(users사용, N:M 관계)

     * 사용가능 모델
     - User, Post, Hashtag 모델
     - Follow, PostHashtag: 시퀄라이저가 associate()를 통해 자동 생성
       db.sequelize.models.Follow, db.sequelize.models.PostHashtag 형태로 사용가능

     0) DB서버 실행
        mysqld

     1) models 폴더에 user.js, post.js, hashtag.js 생성

     2) models 폴더에 index.js 파일 생성: 모델 정의 등록, 실제로 관계 설정 실행

     3) config 폴더의 config.json을 환경에 맞게 설정
     "development" : {
          "username": "root",
          "password": "nodebird",
          "database": "node.js",
          "host":"127.0.0.1",
          "dialect": "mariadb"
     },
     npm i mysql2 ---> mysql2
     npm i mariadb --> mariadb

     4) DB서버에 DB생성, create database nodejs;
     
     5) 테이블 생성
        app.js 수정
        콘솔에서 npx sequelize db:create --> DB생성됨
     
     npm i -g sequelize 설치 시 --> sequelize db:create
     npm i sequelize    설치 시 --> npx sequelize db:create

9.3 passport 모듈로 로그인 구현
     * loacl 로그인 기능 구현
     1) passport 모듈 설치: 여권의 의미로
     npm -i passport passport-local passport-kakao bcrypt

     2) app.js 수정: passport 미들웨어 설정 및 연결 419~420p

     3) passport/index.js 구현 420페이지

     - 로그인 시 실행 과정
     p.422
     1. 라우터를 통해 로그인 요청이 들어옴(incomming)\
     2. 라우터에서 passport.authenticate() 호출
     3. 로그인 전력을 수행
     4. 로그인 성공 시 사용자 정보 객체와 함께 req.login 호출
     5. req.login()가 passport.serializeUser() 호출
     6. req.session에 사용자 아이디만 저장
     7. 로그인 완료

     - 로그인 이후 과정
     1. 요청이 들어옴
     2. 라우터에 요청처리 의뢰가 되기전 passport.session() 미들웨어가 passport.deserializeUser() 호출
     3. req.session 객체에 저장된 유저의 아이디로 데이터베이스에서 사용자 조회
     4. 조회된 사용자 정보를 req.user에 저장
     5. 라우터에서 req.user 객체 정보 사용 가능

     9.3.1. 로컬 로그인 구현하기

     4) 미들웨어 구현 : routes/middlewares.js

     5) routes/page.js 를 수정: p.423

     6) 로그인 과정 구현
     6-1) 회원가입, 로그인, 로그아웃 라우터 구현: routes/auth.js
     6-2) 