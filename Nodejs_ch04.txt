4. http 모듈로 서버 만들기
  .1 요청과 응갑 이해하기
    * Server vs Client
      서버(웹서버) : 서비스를 제공
      클라이언트(웹브라우저) : 서비스를 요구

    * Request vs Response
      - Client에서 Server로 Request 보냄
      - Server는 Request 정보를 확인 후 처리
      - Server는 처리 결과를 Client에 Response함
      --> 이벤트 처리와 유사
        요청 이벤트가 서버로 오면 미리 정해둔 이벤트 리스너(콜백)를
        실행(처리)하고 그 결과를 클라이언트로 응답함

    * HTTP: Request와 Response를 위해 사용하는 통신규약
      
      - HTTP: HyperText Transfer Protocol의 약자
      - HTML
      - HTTP와 메시지를 주고 받음
      - HTTP 메시지 구성: HTTP Headers, HTTP Body
      - HTTP Message 종류:
        - HTTP 요청 메시지: Header + Body(사용자 입력값)
        - HTTP 응답 메시지: Header + Body(html 문서, js코드, jpg 등등의 리소드)

      - localhost: 현재 컴퓨터의 내부 도메인 주소
        127.0.0.1: 현재 컴퓨터의 내부 IP 주소

      - 포트 번호
        0~1024 포트 번호는 시스템 예약 포트 번호
        80: 웹서버 포트
        21: FTP 서버 포트
        23: TELNET 서버포트
        8080 -> 8081 -> 8082 식으로 포트 번호 바꿔가면서
    
      * html 파일을 만들어서 fs모듈을 이용

      * HTTP status code
        200 ~ : 정상코드(200-성공, 201-작성됨)
        300 ~ : redirection(301-영구이동, 302-임시이동)
        400 ~ : 400-잘못된 요청. 401-권한없음, 403-금지됨(forbidden), 404-찾지못함
        500 ~ : 서버오류(500-내부서버오류, 502-불량게이트웨이, 503-서비스 사용불가)

    * 노드에서 HTTP서버를 만들기 위해 HTTP 모듈을 사용

  .2 REST와 라우팅 사용하기
    - REST: REpresentational State Transfer
      대표적인 상태전달, 주소

    - RESTful 하게 서비스 개발 권장
      주소에 의미를 명확하게 전달하도록 주소 구성하자

    - RESTful 하게 개발 권장사장
    : 주소의미의 명확성 확보 -> 서버(백엔드), 클라이언트 영역의 분리 원활
      주소: 명사형으로 지정
      /user: 사용자 관련 서비스요청 주소
      /post: 게시글 관련 서비스요청 주소
      CRUD(Create-Read-Update-Delete)의 표현
        HTTP 요청 방법(Request Method)
        
      * HTTP Request Method: GET, POST, PUT, PATCH, DELETE, OPTIONS
        POSTman을 이용하여 테스트

        GET /user : 유저 정보를 읽어라
        POST /user : 유저 정보를 작성해라
        PUT /user
        PATCH /user/1 : 1번 아이디를 가진 유저의 정보를 바꿔라
        DELETE /user/1 : 1번 아이디를 가진 유저를 삭제해라

      * REST 주소 구조로 개발한 서버
        RESTful하다 라고 하며, RESTful 웹서버라고 한다

      * req: 사용자의 요청정보
      - req.moethod: GET, POST, DELETE, PATCH, PUT, OPTIONS
      - req.url: 요청 주소,/,/users
        1. get / 요청
          http://localhost:8082/

  .3 쿠기와 세션 이해하기
    Cookie, Session

    Cookie를 사용하는 이유
    - HTTP의 특성때문
      HTTP는 상태를 저장하지 않는다. => Stateless Protocol

      쿠키: 키와 값의 쌍
      매 요청마다 서버에 동봉해서 보냄
      서버는 쿠키를 읽어 누구인지 파악